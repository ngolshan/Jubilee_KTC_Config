######################################
## KTC Toolchanger Definition
######################################

[ktc_toolchanger Jubilee]

init_mode = ON_START

init_gcode:
  {% if myself.selected_tool|default("none")|lower == ktc.TOOL_NONE|lower %}
    KTC_TOOLCHANGER_DISENGAGE TOOLCHANGER={myself.name}
    KTC_SET_ACTIVE_TOOL TOOL={ktc.TOOL_NONE}
    KTC_SET_STATE TOOLCHANGER={myself.name} STATE=READY
    RESPOND MSG="Toolchanger {myself.name} initialized unlocked, without tool"
  {% else %}
    KTC_TOOLCHANGER_ENGAGE TOOLCHANGER={myself.name} IGNORE_ENGAGED=True
    RESPOND MSG="Toolchanger {myself.name} initialized with tool {myself.selected_tool}"
  {% endif %}

engage_gcode:
  # SAVE_GCODE_STATE NAME=tool_unlock_state                                         # Save gcode state
  MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=0                                 # Set assumed possition as rotated to min
  MANUAL_STEPPER STEPPER=tool_lock Move=1 SPEED=30 STOP_ON_ENDSTOP=-1 SYNC=1      # Move until no longer endstop is triggered, max 1degree. If Endstop is not untriggered then raise an error. Wait for the movement before continuing.
  SET_TMC_CURRENT STEPPER=tool_lock CURRENT=1.0                                   # Raise current of stepper temporarily
  MANUAL_STEPPER STEPPER=tool_lock Move=140 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=1     # Move to max and stop on endstop. If Endstop is not triggered then don't raise an error. Wait for the movement before continuing.
  # If endstop is not triggered then try to lock again for safety. Best to check the endstops before calling this. 
  QUERY_ENDSTOP_CONTINUESLY ENDSTOP='manual_stepper tool_lock' ATEMPTS=3
  _TOOL_LOCK_ENDSTOP_CHECK
  M400
  MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=0                                 # Set manual extruder position as 0
  SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.7                                   # Decrease current to standard current.
  # RESTORE_GCODE_STATE NAME=tool_unlock_state MOVE=0                               # Restore gcode state
  RESPOND MSG="KTC state: {ktc.state|default("none")|lower}."
  {% if ktc.state|default("none")|lower != STATE_TYPE.CHANGING|lower and ktc.state|default("none")|lower != STATE_TYPE.INITIALIZING|lower %}
    RESPOND MSG="KTC state is not changing or initializing."
    KTC_TOOLCHANGER_SET_SELECTED_TOOL TOOLCHANGER={myself.name} TOOL={ktc.TOOL_UNKNOWN}
    KTC_SET_ACTIVE_TOOL TOOL={ktc.TOOL_UNKNOWN}
    RESPOND MSG="Toolchanger {myself.name} engaged"
  {% endif %}
  KTC_SET_STATE TOOLCHANGER={myself.name} STATE=ENGAGED

disengage_gcode:
  # SAVE_GCODE_STATE NAME=tool_lock_state                                           # Save gcode state
  MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=180                               # Set assumed possition as rotated to max
  MANUAL_STEPPER STEPPER=tool_lock Move=179 SPEED=30 STOP_ON_ENDSTOP=-1 SYNC=1    # Move until no longer endstop is triggered, max 1degree. If Endstop is not untriggered then raise an error. Wait for the movement before continuing.
  MANUAL_STEPPER STEPPER=tool_lock Move=0 SPEED=100 STOP_ON_ENDSTOP=2 SYNC=1      # Move to min and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
  # If endstop is not triggered then try to lock again for safety. Best to check the endstops before calling this. 
  QUERY_ENDSTOP_CONTINUESLY ENDSTOP='manual_stepper tool_lock' ATEMPTS=3
  _TOOL_UNLOCK_ENDSTOP_CHECK
  M400
  MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=0                                 # Set manual extruder position as 0
  MANUAL_STEPPER STEPPER=tool_lock ENABLE=0                                       # Turn off the stepper while unlocked so it can rest without triggering the endswitch
  # RESTORE_GCODE_STATE NAME=tool_lock_state MOVE=0                                 # Restore gcode state
  {% if ktc.active_tool|default("none")|lower == myself.selected_tool|default("none")|lower %}
    KTC_SET_ACTIVE_TOOL TOOL={ktc.TOOL_NONE}       # Set the active tool to none
  {% endif %}
  KTC_TOOLCHANGER_SET_SELECTED_TOOL TOOLCHANGER={myself.name} TOOL={ktc.TOOL_NONE}
  KTC_SET_STATE TOOLCHANGER={myself.name} STATE=READY
  {% if ktc.state|default("none")|lower != STATE_TYPE.CHANGING or ktc.state|default("none")|lower != STATE_TYPE.INITIALIZING %}
    RESPOND MSG="Toolchanger {myself.name} disengaged"
  {% endif %}

tool_select_gcode: 
  _TOOL_PICKUP_START T={myself.name}
  _TOOL_PICKUP_END T={myself.name}
  SET_INPUT_SHAPER SHAPER_FREQ_X={myself.params_shaper_freq_x} SHAPER_FREQ_Y={myself.params_shaper_freq_y} SHAPER_TYPE_X={myself.params_shaper_type_x} SHAPER_TYPE_Y={myself.params_shaper_type_y}

tool_deselect_gcode:
  _TOOL_DROPOFF_START T={myself.name}
  _TOOL_DROPOFF_END T={myself.name}


#########################################################
## KTC Toolchanger Internal Macros - Tool Lock & Unlock
#########################################################


[gcode_macro _TOOL_LOCK_ENDSTOP_CHECK]
description: Before this is called and evaluated a QUERY_ENDSTOPS checks the endstops. If not triggered this will advance the stepper 1*, check the endstop and call the next step.
gcode:
    # If endstop is not triggered then try to lock again just in case the lock slipped. Need to check the endstops before calling this. 
    {% if printer.query_endstop_continuesly.last_endstop_query['manual_stepper tool_lock']|default(False) == False  %}
      {action_respond_info("TOOL_LOCK_ENDSTOP_CHECK: Endstop on manual_stepper tool_lock not triggered at check.") }
      MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=140                                 # Set assumed possition as rotated to max (should already be this)
      MANUAL_STEPPER STEPPER=tool_lock Move=142 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=1       # Move 2 degrees over max and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
      M400
      QUERY_ENDSTOP_CONTINUESLY ENDSTOP='manual_stepper tool_lock' ATEMPTS=3
      _TOOL_LOCK_ENDSTOP_CHECK_SECONDSTAGE
    {% endif %}

[gcode_macro _TOOL_LOCK_ENDSTOP_CHECK_SECONDSTAGE]
description: Before this is called and evaluated a QUERY_ENDSTOPS checks the endstops. If not triggered this will advance the stepper 1*, check the endstop and call the next step.
gcode:
    # If endstop is not triggered then try to lock again just in case the lock slipped. Need to check the endstops before calling this. 
    {% if printer.query_endstop_continuesly.last_endstop_query['manual_stepper tool_lock']|default(False) == False  %}
      {action_respond_info("TOOL_LOCK_ENDSTOP_CHECK: Endstop on manual_stepper tool_lock not triggered at check.") }
      MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=140                                 # Set assumed possition as rotated to max (should already be this)
      MANUAL_STEPPER STEPPER=tool_lock Move=142 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=1       # Move 2 degrees over max and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
      QUERY_ENDSTOP_CONTINUESLY ENDSTOP='manual_stepper tool_lock' ATEMPTS=3
      _TOOL_LOCK_ENDSTOP_CHECK_THIRDSTAGE
    {% endif %}

[gcode_macro _TOOL_LOCK_ENDSTOP_CHECK_THIRDSTAGE]
description: Before this is called and evaluated a QUERY_ENDSTOPS checks the endstops. If not triggered this either pause the print or throw an error.
gcode:
  # If endstop is not triggered then pause or raise error.
  {% if printer.query_endstop_continuesly.last_endstop_query['manual_stepper tool_lock']|default(False) == False  %}
    KTC_LOG_INFO MSG="_TOOL_LOCK_ENDSTOP_CHECK_THIRDSTAGE: Endstop on manual_stepper tool_lock still not triggered at second check. Pauses untill endstop is triggerd."
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.7             # Decrease current to somewhat lower current.
    KTC_HEATERS_PAUSE
    QUERY_ENDSTOP_CONTINUESLY ENDSTOP='manual_stepper tool_lock'     # Running continuesly until triggered and called by GCODE so it will be executed after previous commands in order.

    # After this we asume the error is fixed and can resume.
    KTC_HEATERS_RESUME

  {% endif %}

[gcode_macro _TOOL_LOCK_CHECK]
description: Check so the tool is mounted by slightly advancing the lock again until hit endstop, only if endstop not already hit. Do not wait for it to finish.
gcode:
  # If endstop is not triggered then try to lock again for safety. Need to check the endstops before calling this. 
  {% if printer.query_endstop_continuesly.last_endstop_query['manual_stepper tool_lock']|default(False) == False  %}
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=1.0
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=140                                 # Set assumed possition as rotated to max (should already be this)
    MANUAL_STEPPER STEPPER=tool_lock Move=150 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=1       # Move 10 degrees over max and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
    # Check if the tool is locked by checking on the endstops.
    QUERY_ENDSTOP_CONTINUESLY ENDSTOP='manual_stepper tool_lock' ATEMPTS=3
    _TOOL_LOCK_ENDSTOP_CHECK
    M400
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.8
  {% endif %}


[gcode_macro _TOOL_UNLOCK_ENDSTOP_CHECK]
description: Before this is called and evaluated a QUERY_ENDSTOPS checks the endstops. If not triggered this either pause the print or throw an error.
gcode:
  # If endstop is not triggered then pause or raise error.
  {% if printer.query_endstop_continuesly.last_endstop_query['manual_stepper tool_lock']|default(False) == False  %}
    {action_respond_info("_TOOL_UNLOCK_ENDSTOP_CHECK: Endstop on manual_stepper tool_lock still not triggered at unlock.") }
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.7             # Decrease current to somewhat lower current.
    KTC_LOG_INFO MSG="_TOOL_LOCK_ENDSTOP_CHECK_THIRDSTAGE: Endstop on manual_stepper tool_lock still not triggered at second check. Pauses untill endstop is triggerd."
    KTC_HEATERS_PAUSE
    QUERY_ENDSTOP_CONTINUESLY ENDSTOP='manual_stepper tool_lock'     # Running continuously until triggered and called by GCODE so it will be executed after previous commands in order.

    # After this we asume the error is fixed and can resume.
    KTC_HEATERS_RESUME
  {% endif %}


##################################################
## KTC Toolchanger Internal Macros - Tool Pickup
##################################################

[gcode_macro _TOOL_PICKUP_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['ktc_tool '~params.T]%}

  M568 P{myself.name} A2                                               # Put tool heater in Active mode

  # Disable any filament runout sensors.
  #_DISABLE_ALL_RUNOUT_SENSORS
  
  SAVE_ACCELERATION                                                    # Save current acceleration value.
  M204 S8000                                                           # Set high acceleration for toolchanging

  SAVE_GCODE_STATE NAME=TOOL_PICKUP_T{myself.name}                     # Save GCODE state. Will be restored at the end of _TOOL_PICKUP_END
  #SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0         # Don't use the X-max endstop as EmergencyStop.
  G90

  ##############  Move in to zone  ##############
  {% if printer.toolhead.position.y < myself.params_zone[1] %}         # If Printer inside safezone:
    G0 X{myself.params_zone[0]} Y{myself.params_zone[1]} F40000        # Fast move XY inside the safezone.
  {% else %}                                                           # Else, outside of safezone:
    G0 Y{myself.params_zone[1]} F40000                                 # Fast move Y back inside the safezone, so we don't crash into other tools.
    G0 X{myself.params_zone[0]} F40000                                 # Fast move X (laterally) in front of parking spot.
  {% endif %}   
  
  ##############  Move carriage in to parking spot  ##############
  G0 Y{myself.params_park[1]|int - 15}  F40000                         # Fast Move near the pickup position for tool.
  G0 Y{myself.params_park[1]} F3000                                    # Slow Move to the pickup position for tool.

  ##############  Lock Tool  ##############
  M400                                                                 # Wait for all moves to finish.
  KTC_TOOLCHANGER_ENGAGE TOOLCHANGER={myself.toolchanger}              # Lock the tool.
  SET_GCODE_OFFSET Z={myself.offset[2]} MOVE=1                         # Set and move the Z offset. Avoid crashing into bed when moving out later.

  ##############  Wait for heater  ##############
  {% if myself.heater_names|length > 0 %}                              # If the tool has an extruder:
    ACTIVATE_EXTRUDER EXTRUDER={myself.heater_names[0]}                # Activate the extruder
    M116 P{myself.number} W2                                           # Wait for tool to reach target temperature with a tolerance of 2*C
  {% endif %}

  ##############  Move out to zone  ##############
  G0 X{myself.params_zone[0]} F6000                                    # Slow Move to the zone position for tool.


[gcode_macro _TOOL_PICKUP_END]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['ktc_tool '~params.T]%}
  {%set ktc = printer['ktc']%}
  
    ##############  Move out to Safe position  ##############
  G0 Y{myself.params_zone[1]} F40000                                   # Fast Move to the safe position for tools.

    ##############  Check Tool Lock  ##############
  QUERY_ENDSTOP_CONTINUESLY ENDSTOP='manual_stepper tool_lock' ATEMPTS=3
  _TOOL_LOCK_CHECK                                                     # Macro to check so the tool is mounted by slightly advancing the lock again until hit endstop, only if endstop not already hit. Do not wait for it to finish.

    ##############  Finish up  ##############
  M400                                                                 # Wait for current moves to finish.
  #SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1         # Use the X max as EmergencyStop.
  RESTORE_GCODE_STATE NAME=TOOL_PICKUP_T{myself.name} MOVE=0           # Restore GCODE state. Was saved at the begining of _TOOL_PICKUP_START. No move.
                                                                       # Set the toolhead offsets. Z is set and moved before any moves in _TOOL_PICKUP_START. Needs to be after any RESTORE_GCODE_STATE!
  SET_GCODE_OFFSET X={myself.offset[0]|float  + ktc.global_offset[0]|float } Y={myself.offset[1]|float  + ktc.global_offset[1]|float } Z={myself.offset[2]|float  + ktc.global_offset[2]|float } MOVE=0

    ##############  Prime the filament, asume it was retracted as per e3d Revo documentation  ##############
  #G1 F40000

  SAVE_GCODE_STATE NAME=TOOL_PICKUP2_T{myself.name}                    # Save state for priming nozzle
  
  {% if  myself.heater_names|length > 0 %}                             # If the tool has an extruder:
                                                                       # If can extrude and global purge is active:
    {% if printer[myself.heater_names[0]].can_extrude|default("false")|lower == 'true' and printer.ktc.params_purge_on_toolchange %}
        M83                                                            # Relative extrusion
        G1 E{myself.meltzonelength|int - 2} F7200                      # DeRetract filament from meltzone
        G1 E2 F400                                                     # DeRetract filament from meltzone
    {% endif %}
  {% endif %}
  RESTORE_GCODE_STATE NAME=TOOL_PICKUP2_T{myself.name}                 # Restore state after priming nozzle
  #G1 F30000
  RESTORE_ACCELERATION                                                 # Restore saved acceleration value.
  KTC_SET_STATE TOOL={myself.name} STATE=SELECTED                 # Set the tool state to selected


###################################################
## KTC Toolchanger Internal Macros - Tool Dropoff
###################################################

[gcode_macro _TOOL_DROPOFF_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['ktc_tool '~params.T]%}

  # Disable any filament runout sensors.
  _DISABLE_ALL_RUNOUT_SENSORS

  SAVE_ACCELERATION                                                    # Save current acceleration value.
  M204 S8000                                                           # Set high acceleration for toolchanging

  {% if myself.name != printer.ktc.active_tool %}
    { action_raise_error("_TOOL_DROPOFF_START: Wrong tool. Asked to dropoff T" ~ myself.name ~ " while current is T" ~ printer.ktc.active_tool  ~ ".") }
  {% endif %}

    ##############  Retract the filament as per e3d Revo documentation  ##############
  {% if  myself.heater_names|length > 0 %}                             # If the tool has an extruder:
    M568 P{myself.name} A1                                             # Put tool heater in standby
                                                                       # If can extrude and global purge is active:
    {% if printer[myself.heater_names[0]].can_extrude|default("false")|lower == 'true' and printer.ktc.params_purge_on_toolchange %}
      M83                                                              # Relative extrusion
      G1 E-4 F7200                                                     # retract filament from meltzone
      G1 E2 F800                                                       # Extrude slightly to form a tip
      G1 E-{myself.params_meltzonelength|float - 2} F7200              # Retract filament from meltzone
    {% endif %}
  {% endif %}

  SET_GCODE_OFFSET X=0 Y=0                                             # Set XY offset to 0 (carriage reference frame) so we park the tool correctly.
  SAVE_GCODE_STATE NAME=TOOL_DROPOFF_002_T{myself.name}                # Save GCode state.
  G90                                                                  # Absolute positions

  #SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0 # Don't use the X max as EmergencyStop.

  ##############  Move in to zone  ##############
  {% if printer.toolhead.position.y < myself.params_zone[1] %}         # If Printer inside safezone:
    G0 X{myself.params_zone[0]} Y{myself.params_zone[1]} F40000        # Fast move XY inside the safezone.
  {% else %}                                                           # Else, outside of safezone:
    G0 Y{myself.params_zone[1]} F40000                                 # Fast move Y back inside the safezone, so we don't crash into other tools.
    G0 X{myself.params_zone[0]} F40000                                 # Fast move X (laterally) in front of parking spot.
  {% endif %}

  ##############  Park the tool  ##############
  M400                                                                 # Wait for current moves to finish
  G0 Y{myself.params_park[1]} F3000                                    # Slow Move to the dropoff position for tool.


[gcode_macro _TOOL_DROPOFF_END]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['ktc_tool '~params.T]%}

  ##############  Unlock the carriage  ##############
  M400                                                                 # Wait for current moves to finish
  KTC_TOOLCHANGER_DISENGAGE TOOLCHANGER={myself.toolchanger}           # Unlock the tool

  ##############  Move back out to zone  ##############
  G0 Y{myself.params_park[1]|float - 15} F6000                         # Slow Move away from the pickup position for tool, to clear the twist lock.
  G0 Y{myself.params_zone[1]} F40000                                   # Fast Move to the general pickup position for tools.
  M400                                                                 # Wait for current moves to finish

  #SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1 # Use the X max as EmergencyStop.
  RESTORE_GCODE_STATE NAME=TOOL_DROPOFF_002_T{myself.name} MOVE=0      # Restore Gcode state
  RESTORE_ACCELERATION                                                 # Restore saved acceleration value.
  SET_GCODE_OFFSET Z=0                                                 # Set Z offset to 0 after tool is parked.
  KTC_SET_STATE TOOL={myself.name} STATE=READY                    # Set the tool state to ready
  